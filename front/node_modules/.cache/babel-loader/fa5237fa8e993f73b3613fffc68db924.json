{"ast":null,"code":"var _jsxFileName = \"/Users/tuomasnummela/Desktop/bookworm/src/components/ReadingUpdater.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ReadingUpdater = props => {\n  _s();\n\n  //Variable declarations\n  //State declarations\n  const [pagesRead, setPagesRead] = useState(0);\n  const [totalPagesOfBook, setTotalPagesOfBook] = useState(0);\n  const [bookName, setBookName] = useState(''); //Function declarations\n\n  const submitReading = () => {\n    const bookSelector = document.getElementById('bookSelector');\n    const knownBook = props.books.find(book => book.name === bookName);\n\n    if (bookSelector.value === 'default') {\n      //New book\n      if (props.books.find(book => book.name === bookName)) {\n        //'New' bookName is actually the name of a book previously added\n        window.alert('Book has already been added!');\n      } else if (bookName === '') {\n        //New bookname is empty\n        window.alert('Insert a book name!');\n      } else if (totalPagesOfBook <= 0 || pagesRead <= 0 || pagesRead > totalPagesOfBook) {\n        //Invalid book page count\n        window.alert('Invalid page count!');\n      } else {\n        const newBook = {\n          'name': bookName,\n          'pages': totalPagesOfBook,\n          'pagesRead': pagesRead\n        };\n        props.setBooks(props.books.concat(newBook));\n        props.setStreak(props.streak + 1);\n        props.setTotalPages(props.totalPages + pagesRead);\n        props.setAppState('start');\n      }\n    } else {\n      //Selected book\n      if (pagesRead <= 0 || knownBook.pagesRead + pagesRead > knownBook.pages) {\n        //Invalid book page count\n        window.alert('Invalid page count!');\n      } else {\n        knownBook.pagesRead += pagesRead;\n        props.setStreak(props.streak + 1);\n        props.setTotalPages(props.totalPages + pagesRead);\n        props.setAppState('start');\n      }\n    } //EMPTY INPUTS\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Update read books\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Select book:\", /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"bookSelector\",\n        defaultValue: \"default\",\n        onChange: () => setBookName(document.getElementById('bookSelector').value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"default\",\n          disabled: true,\n          hidden: true,\n          children: \"Choose here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 5\n        }, this), props.books.map(book => /*#__PURE__*/_jsxDEV(\"option\", {\n          children: book.name\n        }, book.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 32\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"... or add a new one: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"book name here...\",\n        onChange: event => setBookName(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"page count here...\",\n        onChange: event => setTotalPagesOfBook(Number(event.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Pages read: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"read pages here...\",\n        onChange: event => setPagesRead(Number(event.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submitReading,\n      children: \"Submit pages read!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ReadingUpdater, \"Kp5ieFAwjkCXJfNJfzt2ZQDus8w=\");\n\n_c = ReadingUpdater;\nexport default ReadingUpdater;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadingUpdater\");","map":{"version":3,"sources":["/Users/tuomasnummela/Desktop/bookworm/src/components/ReadingUpdater.js"],"names":["React","useState","ReadingUpdater","props","pagesRead","setPagesRead","totalPagesOfBook","setTotalPagesOfBook","bookName","setBookName","submitReading","bookSelector","document","getElementById","knownBook","books","find","book","name","value","window","alert","newBook","setBooks","concat","setStreak","streak","setTotalPages","totalPages","setAppState","pages","map","event","target","Number"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\n\nconst ReadingUpdater = (props) => {\n\n\n\t//Variable declarations\n\n\n\t//State declarations\n\tconst [ pagesRead, setPagesRead ] = useState(0);\n\tconst [ totalPagesOfBook, setTotalPagesOfBook ] = useState(0);\n\tconst [ bookName, setBookName ] = useState('');\n\n\t//Function declarations\n\n\t\n\n\n\t\n\tconst submitReading = () => {\n\n\t\tconst bookSelector = document.getElementById('bookSelector');\n\n\t\tconst knownBook = props.books.find(book => book.name === bookName);\n\n\n\t\tif(bookSelector.value === 'default'){\n\t\t\t//New book\n\n\t\t\tif(props.books.find((book) => book.name === bookName)){\n\t\t\t\t//'New' bookName is actually the name of a book previously added\n\t\t\t\twindow.alert('Book has already been added!')\n\n\t\t\t}else if(bookName === ''){\n\t\t\t\t//New bookname is empty\n\t\t\t\twindow.alert('Insert a book name!')\n\n\t\t\t}else if(totalPagesOfBook <= 0 || pagesRead <= 0 || pagesRead > totalPagesOfBook){\n\t\t\t\t//Invalid book page count\n\t\t\t\twindow.alert('Invalid page count!')\n\n\t\t\t}else{\n\t\t\t\tconst newBook = {\n\t\t\t\t\t'name': bookName,\n\t\t\t\t\t'pages': totalPagesOfBook,\n\t\t\t\t\t'pagesRead': pagesRead\n\t\t\t\t}\n\n\t\t\t\tprops.setBooks(props.books.concat(newBook));\n\n\t\t\t\tprops.setStreak(props.streak+1);\n\t\t\t\tprops.setTotalPages(props.totalPages+pagesRead);\n\t\t\t\tprops.setAppState('start')\n\t\t\t}\n\t\t}else{\n\t\t\t//Selected book\n\t\t\tif(pagesRead <= 0 || knownBook.pagesRead+pagesRead > knownBook.pages){\n\t\t\t\t//Invalid book page count\n\t\t\t\twindow.alert('Invalid page count!')\n\t\t\t}else{\n\t\t\t\tknownBook.pagesRead += pagesRead;\n\n\t\t\t\tprops.setStreak(props.streak+1);\n\t\t\t\tprops.setTotalPages(props.totalPages+pagesRead);\n\t\t\t\tprops.setAppState('start')\n\t\t\t}\n\n\t\t}\n\n\n\t\t//EMPTY INPUTS\n\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t{/*Later change book selection to dropdown-menu*/}\n\t\t\t<h3>Update read books</h3>\n\n\t\t\t<p>Select book:\n\t\t\t<select id='bookSelector' defaultValue='default' onChange={() => setBookName(document.getElementById('bookSelector').value)}>\n\t\t\t\t<option value='default' disabled hidden>Choose here</option>\n\n\t\t\t\t{props.books.map((book) => <option key={book.name}>{book.name}</option>)}\n\n\t\t\t</select>\n\t\t\t</p>\n\n\t\t\t<p>... or add a new one: <input type='text' placeholder='book name here...' \n\t\t\tonChange={event => setBookName(event.target.value)}/> \n\t\t\t<input type='text' placeholder='page count here...'\n\t\t\tonChange={event => setTotalPagesOfBook(Number(event.target.value))}/></p>\n\n\t\t\t<p>Pages read: <input type='text' placeholder='read pages here...' \n\t\t\tonChange={event => setPagesRead(Number(event.target.value))} /></p>\n\n\t\t\t<button onClick={submitReading}>Submit pages read!</button>\n\t\t</div>\n\t);\n}\n\n\nexport default ReadingUpdater"]},"metadata":{},"sourceType":"module"}