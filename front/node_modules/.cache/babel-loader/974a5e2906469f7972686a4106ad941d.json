{"ast":null,"code":"var _jsxFileName = \"/Users/tuomasnummela/Desktop/bookworm/front/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css'; //Components\n\nimport Booklist from './components/Booklist.js';\nimport StreakView from './components/StreakView.js';\nimport ReadingUpdater from './components/ReadingUpdater.js';\nimport ReadingGoal from './components/ReadingGoal.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  //Variable state declarations\n  const [appState, setAppState] = useState('start');\n  const [streak, setStreak] = useState(0);\n  const [readingGoal, setReadingGoal] = useState(10);\n  const [pagesReadToday, setPagesReadToday] = useState(0);\n  const [totalPages, setTotalPages] = useState(0);\n  const [books, setBooks] = useState([]); //Date declarations (states)\n\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  const [todayDate] = useState(today); //Set as today for development purposes\n\n  const [readByDate, setReadByDate] = useState(new Date(todayDate.getFullYear(), todayDate.getMonth(), todayDate.getDate()));\n  const [latestDayRead, setLatestDayRead] = useState(new Date(todayDate.getFullYear(), todayDate.getMonth(), todayDate.getDate())); //Functions for getting data from backend\n\n  const setStats = stats => {\n    //Handles resetting pages read today\n    if (todayDate > latestDayRead) {\n      setPagesReadToday(0);\n    } else {\n      setPagesReadToday(stats.pagesReadToday);\n    } //Handles streak resetting\n\n\n    if (todayDate > readByDate) {\n      window.alert('You missed a day of reading, so your streak resets!');\n      setStreak(0);\n    } else {\n      setStreak(stats.streak);\n    }\n\n    setReadingGoal(stats.readingGoal);\n    setTotalPages(stats.totalPages);\n  };\n\n  useEffect(() => {\n    axios.get('http://localhost:3001/api/books').then(response => {\n      setBooks(response.data);\n    });\n  }, []);\n  useEffect(() => {\n    axios.get('http://localhost:3001/api/stats').then(response => {\n      setStats(response.data);\n    });\n  }, [todayDate, readByDate, latestDayRead, setStats]);\n  /*\n   useEffect(() => {\n    if(todayDate > latestDayRead){\n      setPagesReadToday(0);\n    }\n    if(todayDate > readByDate){\n      window.alert('You missed a day of reading, so your streak resets!');\n      setStreak(0);\n    }\n  }, [todayDate, readByDate, latestDayRead])\n  */\n  //Function declarations\n\n  const onReadingUpdateClick = () => {\n    //Renders ReadingUpdater\n    setAppState('updatingReading');\n  };\n\n  const onGoalUpdateClick = () => {\n    //Renders ReadingGoal\n    setAppState('updatingGoal');\n  }; //Handles streak resetting when app is first rendered (ONCE)\n\n\n  useEffect(() => {\n    if (todayDate > latestDayRead) {\n      setPagesReadToday(0);\n    }\n\n    if (todayDate > readByDate) {\n      window.alert('You missed a day of reading, so your streak resets!');\n      setStreak(0);\n    }\n  }, [todayDate, readByDate, latestDayRead]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Bookworm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(StreakView, {\n      streak: streak,\n      totalPages: totalPages,\n      readingGoal: readingGoal,\n      pagesReadToday: pagesReadToday\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [appState === 'start' && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onReadingUpdateClick,\n        children: \"Update read pages!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 32\n      }, this), appState === 'updatingReading' && /*#__PURE__*/_jsxDEV(ReadingUpdater, {\n        setAppState: setAppState,\n        setStreak: setStreak,\n        setTotalPages: setTotalPages,\n        streak: streak,\n        totalPages: totalPages,\n        books: books,\n        setBooks: setBooks,\n        todayDate: todayDate,\n        readByDate: readByDate,\n        setReadByDate: setReadByDate,\n        setLatestDayRead: setLatestDayRead,\n        pagesReadToday: pagesReadToday,\n        setPagesReadToday: setPagesReadToday,\n        readingGoal: readingGoal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 42\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [appState === 'start' && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onGoalUpdateClick,\n        children: \"Set reading goal!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 32\n      }, this), appState === 'updatingGoal' && /*#__PURE__*/_jsxDEV(ReadingGoal, {\n        readingGoal: readingGoal,\n        setReadingGoal: setReadingGoal,\n        setAppState: setAppState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 39\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Booklist, {\n      books: books\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"qBZlbtGYQ+8H4GK2Oz09ZZ+q5Rg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tuomasnummela/Desktop/bookworm/front/src/App.js"],"names":["React","useState","useEffect","axios","Booklist","StreakView","ReadingUpdater","ReadingGoal","App","appState","setAppState","streak","setStreak","readingGoal","setReadingGoal","pagesReadToday","setPagesReadToday","totalPages","setTotalPages","books","setBooks","today","Date","setHours","todayDate","readByDate","setReadByDate","getFullYear","getMonth","getDate","latestDayRead","setLatestDayRead","setStats","stats","window","alert","get","then","response","data","onReadingUpdateClick","onGoalUpdateClick"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport './App.css';\n\n//Components\nimport Booklist from './components/Booklist.js';\nimport StreakView from './components/StreakView.js';\nimport ReadingUpdater from './components/ReadingUpdater.js';\nimport ReadingGoal from './components/ReadingGoal.js';\n\n\nconst App = () => {\n\n  //Variable state declarations\n  const [ appState, setAppState ] = useState('start');\n  const [ streak, setStreak ] = useState(0);\n  const [ readingGoal, setReadingGoal ] = useState(10);\n  const [ pagesReadToday, setPagesReadToday ] = useState(0);\n  const [ totalPages, setTotalPages ] = useState(0);\n  const [ books, setBooks ] = useState([]);\n\n\n  //Date declarations (states)\n\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  \n  const [ todayDate ] = useState(today);\n\n  //Set as today for development purposes\n  const [ readByDate, setReadByDate ] = useState(\n  \tnew Date(todayDate.getFullYear(), todayDate.getMonth(), todayDate.getDate()));\n\n  const [ latestDayRead, setLatestDayRead ] = useState(\n  \tnew Date(todayDate.getFullYear(), todayDate.getMonth(), todayDate.getDate()));\n\n\n\n  //Functions for getting data from backend\n\n  const setStats = (stats) => {\n    //Handles resetting pages read today\n    if(todayDate > latestDayRead){\n      setPagesReadToday(0);\n    }else{\n      setPagesReadToday(stats.pagesReadToday);\n    }\n\n    //Handles streak resetting\n    if(todayDate > readByDate){\n      window.alert('You missed a day of reading, so your streak resets!');\n      setStreak(0);\n    }else{\n      setStreak(stats.streak);\n    }\n\n    setReadingGoal(stats.readingGoal);\n    setTotalPages(stats.totalPages);\n  }\n\n  useEffect(() => {\n    axios\n      .get('http://localhost:3001/api/books')\n      .then(response => {\n        setBooks(response.data);\n    })\n  }, [])\n\n  useEffect(() => {\n    axios\n      .get('http://localhost:3001/api/stats')\n      .then(response => {\n        setStats(response.data);\n    })\n  }, [todayDate, readByDate, latestDayRead, setStats])\n\n\n  /*\n   useEffect(() => {\n    if(todayDate > latestDayRead){\n      setPagesReadToday(0);\n    }\n    if(todayDate > readByDate){\n      window.alert('You missed a day of reading, so your streak resets!');\n      setStreak(0);\n    }\n  }, [todayDate, readByDate, latestDayRead])\n  */\n\n  //Function declarations\n\n  const onReadingUpdateClick = () => {\n\t  //Renders ReadingUpdater\n\t  setAppState('updatingReading')\n  }\n\n  const onGoalUpdateClick = () => {\n  \t\t//Renders ReadingGoal\n  \t\tsetAppState('updatingGoal');\n  }\n\n  //Handles streak resetting when app is first rendered (ONCE)\n  useEffect(() => {\n  \tif(todayDate > latestDayRead){\n  \t\tsetPagesReadToday(0);\n  \t}\n  \tif(todayDate > readByDate){\n  \t\twindow.alert('You missed a day of reading, so your streak resets!');\n  \t\tsetStreak(0);\n  \t}\n  }, [todayDate, readByDate, latestDayRead])\n\n\n\n  return (\n    <div>\n    \t<h1>Bookworm</h1>\n  \t\t\n  \t\t<StreakView streak={streak} totalPages={totalPages} readingGoal={readingGoal} pagesReadToday={pagesReadToday}/>\n\n  \t\t<div>\n  \t\t\t{appState === 'start' && (<button onClick={onReadingUpdateClick}>Update read pages!</button>)}\n\n  \t\t\t{appState === 'updatingReading' && (<ReadingUpdater setAppState={setAppState} setStreak={setStreak} setTotalPages={setTotalPages} streak={streak} totalPages={totalPages} \n  \t\t\tbooks={books} setBooks={setBooks} todayDate={todayDate} readByDate={readByDate} setReadByDate={setReadByDate} setLatestDayRead={setLatestDayRead} pagesReadToday={pagesReadToday} setPagesReadToday={setPagesReadToday} readingGoal={readingGoal}/>) }\n  \t\t</div>\n\n\n  \t\t<div>\n  \t\t\t{appState === 'start' && (<button onClick={onGoalUpdateClick}>Set reading goal!</button>)}\n\n  \t\t\t{appState === 'updatingGoal' && (<ReadingGoal readingGoal={readingGoal} setReadingGoal={setReadingGoal} setAppState={setAppState}/>)}\n  \t\t</div>\n\n\n  \t\t<Booklist books={books}/>\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}