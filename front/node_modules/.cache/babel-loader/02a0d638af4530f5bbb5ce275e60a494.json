{"ast":null,"code":"var _jsxFileName = \"/Users/tuomasnummela/Desktop/bookworm/front/src/components/ReadingUpdater.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ReadingUpdater = props => {\n  _s();\n\n  //Variable state declarations\n  const [pagesRead, setPagesRead] = useState(0);\n  const [totalPagesOfBook, setTotalPagesOfBook] = useState(0);\n  const [bookName, setBookName] = useState('');\n  const [updatingState, setUpdatingState] = useState('start'); //Function declarations\n\n  const select = () => {\n    //Runs when a book is selected on the selector\n    setBookName(document.getElementById('bookSelector').value);\n    setUpdatingState('selected');\n  };\n\n  const newBook = input => {\n    //Runs when new book name input is edited\n    setBookName(input);\n    setUpdatingState('new');\n  }; //The heart of reading updating\n\n\n  const submitReading = () => {\n    const bookSelector = document.getElementById('bookSelector');\n    const knownBook = props.books.find(book => book.name === bookName);\n\n    if (bookName === '') {\n      //BookName input empty and no book selected: ERROR\n      window.alert('Select or enter a book name!');\n      return;\n    }\n\n    if (!bookSelector) {\n      //New book introduced\n      if (props.books.find(book => book.name === bookName)) {\n        //'New' bookName is actually the name of a book previously added: ERROR\n        window.alert('Book has already been added!');\n        return;\n      } else if (bookName === '') {\n        //New bookname is empty: ERROR\n        window.alert('Insert a book name!');\n        return;\n      } else if (isNaN(totalPagesOfBook) || isNaN(pagesRead) || totalPagesOfBook <= 0 || pagesRead <= 0 || pagesRead > totalPagesOfBook) {\n        //Invalid book page count: ERROR\n        window.alert('Invalid page count!');\n        return;\n      } else {\n        //SUCCESS, new book is added onto the booklist\n        const newBook = {\n          'name': bookName,\n          'pages': totalPagesOfBook,\n          'pagesRead': pagesRead\n        };\n        props.setBooks(props.books.concat(newBook));\n        axios.post('http://localhost:3001/notes', noteObject).then(response => {\n          setNotes(notes.concat(response.data));\n          setNewNote('');\n        });\n      }\n    } else {\n      //Selected book from known ones\n      if (isNaN(pagesRead) || pagesRead <= 0 || knownBook.pagesRead + pagesRead > knownBook.pages) {\n        //Invalid book page count: ERROR\n        window.alert('Invalid page count!');\n        return;\n      }\n\n      knownBook.pagesRead += pagesRead;\n    } //Handle stats and UI updating\n\n\n    if (props.streak === 0 && props.pagesReadToday + pagesRead >= props.readingGoal) {\n      //Streak updating after a reset\n      props.setStreak(props.streak + 1);\n      props.setReadByDate(new Date(props.todayDate.getFullYear(), props.todayDate.getMonth(), props.todayDate.getDate() + 1));\n    } else if (props.todayDate.getFullYear() === props.readByDate.getFullYear() && props.todayDate.getMonth() === props.readByDate.getMonth() && props.todayDate.getDate() === props.readByDate.getDate() && props.pagesReadToday + pagesRead >= props.readingGoal) {\n      //Normal streak updating handling\n      props.setStreak(props.streak + 1);\n      props.setReadByDate(new Date(props.readByDate.getFullYear(), props.readByDate.getMonth(), props.readByDate.getDate() + 1));\n    } //Update latestdayread to keep track of pages read/day\n\n\n    props.setLatestDayRead(new Date(props.todayDate.getFullYear(), props.todayDate.getMonth(), props.todayDate.getDate())); //Update pages read (total+daily) and update states of app\n\n    props.setPagesReadToday(props.pagesReadToday + pagesRead);\n    props.setTotalPages(props.totalPages + pagesRead);\n    setUpdatingState('start');\n    props.setAppState('start');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Update read books\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 4\n    }, this), updatingState !== 'new' && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Select book:\", /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"bookSelector\",\n        defaultValue: \"default\",\n        onChange: select,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"default\",\n          disabled: true,\n          hidden: true,\n          children: \"Choose here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 5\n        }, this), props.books.map(book => /*#__PURE__*/_jsxDEV(\"option\", {\n          children: book.name\n        }, book.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 32\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 33\n    }, this), updatingState !== 'selected' && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"... or add a new one:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"book name here...\",\n        onChange: event => newBook(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"page count here...\",\n        onChange: event => setTotalPagesOfBook(Number(event.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 38\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Pages read:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"read pages here...\",\n        onChange: event => setPagesRead(Number(event.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submitReading,\n      children: \"Submit pages read!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ReadingUpdater, \"tSXsLQKJXl6WnPmvDlJUQEa1o7U=\");\n\n_c = ReadingUpdater;\nexport default ReadingUpdater;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadingUpdater\");","map":{"version":3,"sources":["/Users/tuomasnummela/Desktop/bookworm/front/src/components/ReadingUpdater.js"],"names":["React","useState","axios","ReadingUpdater","props","pagesRead","setPagesRead","totalPagesOfBook","setTotalPagesOfBook","bookName","setBookName","updatingState","setUpdatingState","select","document","getElementById","value","newBook","input","submitReading","bookSelector","knownBook","books","find","book","name","window","alert","isNaN","setBooks","concat","post","noteObject","then","response","setNotes","notes","data","setNewNote","pages","streak","pagesReadToday","readingGoal","setStreak","setReadByDate","Date","todayDate","getFullYear","getMonth","getDate","readByDate","setLatestDayRead","setPagesReadToday","setTotalPages","totalPages","setAppState","map","event","target","Number"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport axios from 'axios';\n\nconst ReadingUpdater = (props) => {\n\n\n\t//Variable state declarations\n\tconst [ pagesRead, setPagesRead ] = useState(0);\n\tconst [ totalPagesOfBook, setTotalPagesOfBook ] = useState(0);\n\tconst [ bookName, setBookName ] = useState('');\n\tconst [ updatingState, setUpdatingState ] = useState('start');\n\n\n\t//Function declarations\n\n\tconst select = () => {\n\t\t//Runs when a book is selected on the selector\n\t\tsetBookName(document.getElementById('bookSelector').value);\n\t\tsetUpdatingState('selected');\n\t}\n\n\tconst newBook = (input) => {\n\t\t//Runs when new book name input is edited\n\t\tsetBookName(input);\n\t\tsetUpdatingState('new');\n\t}\n\n\n\t//The heart of reading updating\n\n\tconst submitReading = () => {\n\n\t\tconst bookSelector = document.getElementById('bookSelector');\n\n\t\tconst knownBook = props.books.find(book => book.name === bookName);\n\n\n\n\t\tif(bookName === ''){\n\t\t\t//BookName input empty and no book selected: ERROR\n\t\t\twindow.alert('Select or enter a book name!')\n\t\t\treturn;\n\t\t}\n\n\n\t\tif(!bookSelector){\n\t\t\t//New book introduced\n\n\t\t\tif(props.books.find((book) => book.name === bookName)){\n\t\t\t\t//'New' bookName is actually the name of a book previously added: ERROR\n\t\t\t\twindow.alert('Book has already been added!')\n\t\t\t\treturn;\n\n\t\t\t}else if(bookName === ''){\n\t\t\t\t//New bookname is empty: ERROR\n\t\t\t\twindow.alert('Insert a book name!')\n\t\t\t\treturn;\n\n\t\t\t}else if(isNaN(totalPagesOfBook) || isNaN(pagesRead) || \n\t\t\t\ttotalPagesOfBook <= 0 || pagesRead <= 0 || pagesRead > totalPagesOfBook){\n\t\t\t\t//Invalid book page count: ERROR\n\t\t\t\twindow.alert('Invalid page count!')\n\t\t\t\treturn;\n\n\t\t\t}else{\n\t\t\t\t//SUCCESS, new book is added onto the booklist\n\t\t\t\tconst newBook = {\n\t\t\t\t\t'name': bookName,\n\t\t\t\t\t'pages': totalPagesOfBook,\n\t\t\t\t\t'pagesRead': pagesRead\n\t\t\t\t}\n\n\t\t\t\tprops.setBooks(props.books.concat(newBook));\n\n\t\t\t\taxios\n    \t\t\t\t.post('http://localhost:3001/notes', noteObject)\n    \t\t\t\t.then(response => {\n      \t\t\t\t setNotes(notes.concat(response.data))\n      \t\t\t\t setNewNote('')\n    \t\t\t})\n    \t\t\t\t\n\t\t\t}\n\t\t}else{\n\t\t\t//Selected book from known ones\n\n\t\t\tif(isNaN(pagesRead) || pagesRead <= 0 || knownBook.pagesRead+pagesRead > knownBook.pages){\n\t\t\t\t//Invalid book page count: ERROR\n\t\t\t\twindow.alert('Invalid page count!')\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tknownBook.pagesRead += pagesRead;\n\n\t\t}\n\n\t\t//Handle stats and UI updating\n\n\t\tif(props.streak === 0 && props.pagesReadToday+pagesRead >= props.readingGoal){\n\n\t\t\t//Streak updating after a reset\n\n\t\t\tprops.setStreak(props.streak+1);\n\n\t\t\tprops.setReadByDate(new Date(props.todayDate.getFullYear(), \n\t\t\t\tprops.todayDate.getMonth(), props.todayDate.getDate()+1));\n\n\n\t\t}else if(props.todayDate.getFullYear() === props.readByDate.getFullYear() &&\n\t\t\tprops.todayDate.getMonth() === props.readByDate.getMonth() &&\n\t\t\tprops.todayDate.getDate() === props.readByDate.getDate() && props.pagesReadToday+pagesRead >= props.readingGoal){\n\n\t\t\t//Normal streak updating handling\n\n\t\t\tprops.setStreak(props.streak+1);\n\n\t\t\tprops.setReadByDate(new Date(props.readByDate.getFullYear(), \n\t\t\t\tprops.readByDate.getMonth(), props.readByDate.getDate()+1));\n\t\t}\n\n\t\t//Update latestdayread to keep track of pages read/day\n\n\t\tprops.setLatestDayRead(new Date(props.todayDate.getFullYear(),\n\t\t\tprops.todayDate.getMonth(), props.todayDate.getDate()));\n\n\n\t\t//Update pages read (total+daily) and update states of app\n\t\tprops.setPagesReadToday(props.pagesReadToday+pagesRead);\n\t\tprops.setTotalPages(props.totalPages+pagesRead);\n\t\tsetUpdatingState('start');\n\t\tprops.setAppState('start');\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<h3>Update read books</h3>\n\n\t\t\t{updatingState !== 'new' && (<p>Select book:\n\n\t\t\t<select id='bookSelector' defaultValue='default' onChange={select}>\n\n\t\t\t\t<option value='default' disabled hidden>Choose here</option>\n\n\t\t\t\t{props.books.map((book) => <option key={book.name}>{book.name}</option>)}\n\n\t\t\t</select>\n\n\t\t\t</p>)}\n\n\n\t\t\t{updatingState !== 'selected' && (<p>... or add a new one: \n\n\t\t\t<input type='text' placeholder='book name here...' \n\t\t\tonChange={event => newBook(event.target.value)}/> \n\n\n\t\t\t<input type='text' placeholder='page count here...'\n\t\t\tonChange={event => setTotalPagesOfBook(Number(event.target.value))}/>\n\n\t\t\t</p>)}\n\t\t\t\n\n\t\t\t<p>Pages read: \n\t\t\t<input type='text' placeholder='read pages here...' \n\t\t\tonChange={event => setPagesRead(Number(event.target.value))} />\n\t\t\t</p>\n\n\t\t\t<button onClick={submitReading}>Submit pages read!</button>\n\t\t</div>\n\t);\n}\n\n\nexport default ReadingUpdater;"]},"metadata":{},"sourceType":"module"}