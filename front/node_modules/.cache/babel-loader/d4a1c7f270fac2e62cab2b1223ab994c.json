{"ast":null,"code":"var _jsxFileName = \"/Users/tuomasnummela/Desktop/bookworm/src/components/ReadingUpdater.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ReadingUpdater = props => {\n  _s();\n\n  //Variable declarations\n  //State declarations\n  const [pagesRead, setPagesRead] = useState(0);\n  const [bookName, setBookName] = useState(''); //Function declarations\n\n  const submitReading = () => {\n    const knownBook = props.books.find(book => book.name === bookName); //ACCOUNT FOR NEGATIVE PAGE COUNT!\n\n    if (!knownBook) {\n      //Book not found\n      window.alert('Book not found!');\n    } else if (knownBook.pagesRead + pagesRead <= knownBook.pages) {\n      //Book found and pages read does not exceed total page count of book\n      knownBook.pagesRead += pagesRead;\n      props.setStreak(props.streak + 1);\n      props.setTotalPages(props.totalPages + pagesRead);\n    } else {\n      //Book found but pages read exceeds total page count of book\n      window.alert('Pages read so far is greater than the total page count of book!');\n    }\n\n    props.setAppState('start');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Update read pages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Select book:\", /*#__PURE__*/_jsxDEV(\"select\", {\n        children: props.books.map(book => /*#__PURE__*/_jsxDEV(Book, {\n          book: book\n        }, name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 32\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"... or add a new one: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"book name here...\",\n        onChange: event => setBookName(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Pages read: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"read pages here...\",\n        onChange: event => setPagesRead(Number(event.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submitReading,\n      children: \"Submit pages read!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ReadingUpdater, \"Mxs5EM+5H9hESIDn+jPic3U6/nU=\");\n\n_c = ReadingUpdater;\n\nconst Book = props => {\n  return /*#__PURE__*/_jsxDEV(\"option\", {\n    children: props.book.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 3\n  }, this);\n};\n\n_c2 = Book;\nexport default ReadingUpdater;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ReadingUpdater\");\n$RefreshReg$(_c2, \"Book\");","map":{"version":3,"sources":["/Users/tuomasnummela/Desktop/bookworm/src/components/ReadingUpdater.js"],"names":["React","useState","ReadingUpdater","props","pagesRead","setPagesRead","bookName","setBookName","submitReading","knownBook","books","find","book","name","window","alert","pages","setStreak","streak","setTotalPages","totalPages","setAppState","map","event","target","value","Number","Book"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAAA;;AAGjC;AAGA;AACA,QAAM,CAAEC,SAAF,EAAaC,YAAb,IAA8BJ,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAAEK,QAAF,EAAYC,WAAZ,IAA4BN,QAAQ,CAAC,EAAD,CAA1C,CARiC,CAUjC;;AACA,QAAMO,aAAa,GAAG,MAAM;AAC3B,UAAMC,SAAS,GAAGN,KAAK,CAACO,KAAN,CAAYC,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcP,QAAvC,CAAlB,CAD2B,CAI3B;;AAEA,QAAG,CAACG,SAAJ,EAAc;AACb;AACAK,MAAAA,MAAM,CAACC,KAAP,CAAa,iBAAb;AAEA,KAJD,MAIM,IAAIN,SAAS,CAACL,SAAV,GAAoBA,SAApB,IAAiCK,SAAS,CAACO,KAA/C,EAAqD;AAC1D;AACAP,MAAAA,SAAS,CAACL,SAAV,IAAuBA,SAAvB;AAEAD,MAAAA,KAAK,CAACc,SAAN,CAAgBd,KAAK,CAACe,MAAN,GAAa,CAA7B;AACAf,MAAAA,KAAK,CAACgB,aAAN,CAAoBhB,KAAK,CAACiB,UAAN,GAAiBhB,SAArC;AAEA,KAPK,MAOD;AACJ;AACAU,MAAAA,MAAM,CAACC,KAAP,CAAa,iEAAb;AACA;;AAEDZ,IAAAA,KAAK,CAACkB,WAAN,CAAkB,OAAlB;AAEA,GAxBD;;AA0BA,sBACC;AAAA,4BAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFD,eAIC;AAAA,8CACA;AAAA,kBAEElB,KAAK,CAACO,KAAN,CAAYY,GAAZ,CAAiBV,IAAD,iBAAU,QAAC,IAAD;AAAgB,UAAA,IAAI,EAAEA;AAAtB,WAAWC,IAAX;AAAA;AAAA;AAAA;AAAA,gBAA1B;AAFF;AAAA;AAAA;AAAA;AAAA,cADA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJD,eAYC;AAAA,wDAAyB;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,mBAA/B;AACzB,QAAA,QAAQ,EAAEU,KAAK,IAAIhB,WAAW,CAACgB,KAAK,CAACC,MAAN,CAAaC,KAAd;AADL;AAAA;AAAA;AAAA;AAAA,cAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,YAZD,eAeC;AAAA,8CAAe;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,oBAA/B;AACf,QAAA,QAAQ,EAAEF,KAAK,IAAIlB,YAAY,CAACqB,MAAM,CAACH,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;AADhB;AAAA;AAAA;AAAA;AAAA,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA,YAfD,eAkBC;AAAQ,MAAA,OAAO,EAAEjB,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAlBD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAsBA,CA3DD;;GAAMN,c;;KAAAA,c;;AA6DN,MAAMyB,IAAI,GAAIxB,KAAD,IAAW;AAEvB,sBACC;AAAA,cAASA,KAAK,CAACS,IAAN,CAAWC;AAApB;AAAA;AAAA;AAAA;AAAA,UADD;AAGA,CALD;;MAAMc,I;AAON,eAAezB,cAAf","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\n\nconst ReadingUpdater = (props) => {\n\n\n\t//Variable declarations\n\n\n\t//State declarations\n\tconst [ pagesRead, setPagesRead ] = useState(0);\n\tconst [ bookName, setBookName ] = useState('');\n\n\t//Function declarations\n\tconst submitReading = () => {\n\t\tconst knownBook = props.books.find(book => book.name === bookName);\n\n\n\t\t//ACCOUNT FOR NEGATIVE PAGE COUNT!\n\n\t\tif(!knownBook){\n\t\t\t//Book not found\n\t\t\twindow.alert('Book not found!');\n\n\t\t}else if (knownBook.pagesRead+pagesRead <= knownBook.pages){\n\t\t\t//Book found and pages read does not exceed total page count of book\n\t\t\tknownBook.pagesRead += pagesRead;\n\n\t\t\tprops.setStreak(props.streak+1);\n\t\t\tprops.setTotalPages(props.totalPages+pagesRead);\n\n\t\t}else{\n\t\t\t//Book found but pages read exceeds total page count of book\n\t\t\twindow.alert('Pages read so far is greater than the total page count of book!')\n\t\t}\n\n\t\tprops.setAppState('start');\n\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t{/*Later change book selection to dropdown-menu*/}\n\t\t\t<h3>Update read pages</h3>\n\n\t\t\t<p>Select book: \n\t\t\t<select>\n\n\t\t\t\t{props.books.map((book) => <Book key={name}book={book} />)}\n\n\t\t\t</select>\n\t\t\t</p>\n\n\t\t\t<p>... or add a new one: <input type='text' placeholder='book name here...' \n\t\t\tonChange={event => setBookName(event.target.value)}/></p>\n\n\t\t\t<p>Pages read: <input type='text' placeholder='read pages here...' \n\t\t\tonChange={event => setPagesRead(Number(event.target.value))} /></p>\n\n\t\t\t<button onClick={submitReading}>Submit pages read!</button>\n\t\t</div>\n\t);\n}\n\nconst Book = (props) => {\n\n\treturn (\n\t\t<option>{props.book.name}</option>\n\t)\n}\n\nexport default ReadingUpdater"]},"metadata":{},"sourceType":"module"}