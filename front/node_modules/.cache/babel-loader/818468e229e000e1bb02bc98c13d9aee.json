{"ast":null,"code":"var _jsxFileName = \"/Users/tuomasnummela/Desktop/bookworm/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport './App.css'; //Components\n\nimport Booklist from './components/Booklist.js';\nimport StreakView from './components/StreakView.js';\nimport ReadingUpdater from './components/ReadingUpdater.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  //State declarations\n  const [appState, setAppState] = useState('start');\n  const [streak, setStreak] = useState(0);\n  const [totalPages, setTotalPages] = useState(0);\n  const [books, setBooks] = useState([{\n    'name': 'Bookname 1',\n    'pages': 100,\n    'pagesRead': 0\n  }, {\n    'name': 'Bookname 2',\n    'pages': 200,\n    'pagesRead': 0\n  }]); //Generates today's date in our focused format\n\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  const [latestDateRead, setLatestDateRead] = useState(new Date(\"April 27, 2021\"));\n  const [todayDate] = useState(today);\n  const [readByDate, setReadByDate] = useState(new Date(todayDate.getFullYear(), todayDate.getMonth(), todayDate.getDate() + 1)); //Function declarations\n\n  const onReadingUpdateClick = () => {\n    //Make this render ReadingUpdater\n    setAppState('updatingReading');\n  }; //Handles streak resetting\n\n\n  useEffect(() => {\n    if (todayDate > readByDate) {\n      window.alert('You missed a day of reading, so your streak resets!');\n      setStreak(0);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Bookworm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(StreakView, {\n      streak: streak,\n      totalPages: totalPages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this), appState === 'start' && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onReadingUpdateClick,\n      children: \"Update read pages!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 31\n    }, this), appState === 'updatingReading' && /*#__PURE__*/_jsxDEV(ReadingUpdater, {\n      setAppState: setAppState,\n      setStreak: setStreak,\n      setTotalPages: setTotalPages,\n      streak: streak,\n      totalPages: totalPages,\n      books: books,\n      setBooks: setBooks,\n      todayDate: todayDate,\n      readByDate: readByDate,\n      setReadByDate: setReadByDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 41\n    }, this), /*#__PURE__*/_jsxDEV(Booklist, {\n      books: books\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"m5E6Ah8Rfh7E/uRqoGpXTzv3PKE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tuomasnummela/Desktop/bookworm/src/App.js"],"names":["React","useState","useEffect","Booklist","StreakView","ReadingUpdater","App","appState","setAppState","streak","setStreak","totalPages","setTotalPages","books","setBooks","today","Date","setHours","latestDateRead","setLatestDateRead","todayDate","readByDate","setReadByDate","getFullYear","getMonth","getDate","onReadingUpdateClick","window","alert"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\n\nimport './App.css';\n\n//Components\nimport Booklist from './components/Booklist.js';\nimport StreakView from './components/StreakView.js';\nimport ReadingUpdater from './components/ReadingUpdater.js';\n\n\nconst App = () => {\n\n//State declarations\n  const [ appState, setAppState ] = useState('start');\n  const [ streak, setStreak ] = useState(0);\n  const [ totalPages, setTotalPages ] = useState(0);\n  const [ books, setBooks ] = useState([\n\t  {\n\t\t  'name': 'Bookname 1',\n\t\t  'pages': 100,\n\t\t  'pagesRead': 0\n\t  },\n\t  {\n\t\t  'name': 'Bookname 2',\n\t\t  'pages': 200,\n\t\t  'pagesRead': 0\n\t  }\n  ]);\n\n  //Generates today's date in our focused format\n\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n\n  const [ latestDateRead, setLatestDateRead ] = useState(new Date(\"April 27, 2021\"));\n  \n  const [ todayDate ] = useState(today);\n\n  const [ readByDate, setReadByDate ] = useState(\n  \tnew Date(todayDate.getFullYear(), todayDate.getMonth(), todayDate.getDate()+1));\n\n\n  //Function declarations\n\n  const onReadingUpdateClick = () => {\n\t  //Make this render ReadingUpdater\n\t  setAppState('updatingReading')\n  }\n\n  //Handles streak resetting\n  useEffect(() => {\n  \tif(todayDate > readByDate){\n  \t\twindow.alert('You missed a day of reading, so your streak resets!');\n  \t\tsetStreak(0);\n  \t}\n  }, [])\n\n\n  return (\n    <div>\n    \t<h1>Bookworm</h1>\n  \t\t\n  \t\t<StreakView streak={streak} totalPages={totalPages}/>\n\n  \t\t{appState === 'start' && (<button onClick={onReadingUpdateClick}>Update read pages!</button>)}\n\n  \t\t{appState === 'updatingReading' && (<ReadingUpdater setAppState={setAppState} setStreak={setStreak} setTotalPages={setTotalPages} streak={streak} totalPages={totalPages} \n  \t\t\tbooks={books} setBooks={setBooks} todayDate={todayDate} readByDate={readByDate} setReadByDate={setReadByDate}/>) }\n\n  \t\t<Booklist books={books}/>\n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}