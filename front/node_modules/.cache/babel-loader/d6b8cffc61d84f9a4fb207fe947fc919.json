{"ast":null,"code":"var _jsxFileName = \"/Users/tuomasnummela/Desktop/bookworm/src/components/ReadingUpdater.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ReadingUpdater = props => {\n  _s();\n\n  //State declarations\n  const [pagesRead, setPagesRead] = useState(0);\n  const [totalPagesOfBook, setTotalPagesOfBook] = useState(0);\n  const [bookName, setBookName] = useState('');\n  const [updatingState, setUpdatingState] = useState('start'); //Function declarations\n\n  const select = () => {\n    //Runs when a book is selected on the selector\n    setBookName(document.getElementById('bookSelector').value);\n    setUpdatingState('selected');\n  };\n\n  const newBook = input => {\n    //Runs when new book name is edited\n    setBookName(input);\n    setUpdatingState('new');\n  };\n\n  const inputPagesRead = input => {\n    setPagesRead(Number(input));\n  };\n\n  const inputTotalPagesOfBook = () => {}; //TODO: ACCOUNT FOR USER INPUTTING TEXT IN THE PAGES-FIELD\n\n\n  const submitReading = () => {\n    const bookSelector = document.getElementById('bookSelector');\n    const knownBook = props.books.find(book => book.name === bookName);\n\n    if (bookName === '') {\n      window.alert('Select or enter a book name!');\n      return;\n    }\n\n    if (!bookSelector) {\n      //New book\n      if (props.books.find(book => book.name === bookName)) {\n        //'New' bookName is actually the name of a book previously added\n        window.alert('Book has already been added!');\n        return;\n      } else if (bookName === '') {\n        //New bookname is empty\n        window.alert('Insert a book name!');\n        return;\n      } else if (totalPagesOfBook <= 0 || pagesRead <= 0 || pagesRead > totalPagesOfBook) {\n        //Invalid book page count\n        window.alert('Invalid page count!');\n        return;\n      } else {\n        const newBook = {\n          'name': bookName,\n          'pages': totalPagesOfBook,\n          'pagesRead': pagesRead\n        };\n        props.setBooks(props.books.concat(newBook));\n      }\n    } else {\n      //Selected book\n      if (pagesRead <= 0 || knownBook.pagesRead + pagesRead > knownBook.pages) {\n        //Invalid book page count\n        window.alert('Invalid page count!');\n        return;\n      }\n\n      knownBook.pagesRead += pagesRead;\n    } //Handle stats and UI updating\n\n\n    if (props.streak === 0) {\n      //Streak updating after a reset\n      props.setStreak(props.streak + 1);\n      props.setReadByDate(new Date(props.todayDate.getFullYear(), props.todayDate.getMonth(), props.todayDate.getDate() + 1));\n    } else if (props.todayDate.getFullYear() === props.readByDate.getFullYear() && props.todayDate.getMonth() === props.readByDate.getMonth() && props.todayDate.getDate() === props.readByDate.getDate()) {\n      //Normal streak updating handling\n      props.setStreak(props.streak + 1);\n      props.setReadByDate(new Date(props.readByDate.getFullYear(), props.readByDate.getMonth(), props.readByDate.getDate() + 1));\n    }\n\n    props.setTotalPages(props.totalPages + pagesRead);\n    setUpdatingState('start');\n    props.setAppState('start');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Update read books\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 4\n    }, this), updatingState !== 'new' && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Select book:\", /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"bookSelector\",\n        defaultValue: \"default\",\n        onChange: select,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"default\",\n          disabled: true,\n          hidden: true,\n          children: \"Choose here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 5\n        }, this), props.books.map(book => /*#__PURE__*/_jsxDEV(\"option\", {\n          children: book.name\n        }, book.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 32\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }, this), updatingState !== 'selected' && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"... or add a new one: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"book name here...\",\n        onChange: event => newBook(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 30\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"page count here...\",\n        onChange: event => setTotalPagesOfBook(Number(event.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Pages read: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"read pages here...\",\n        onChange: event => inputPagesRead(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submitReading,\n      children: \"Submit pages read!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ReadingUpdater, \"tSXsLQKJXl6WnPmvDlJUQEa1o7U=\");\n\n_c = ReadingUpdater;\nexport default ReadingUpdater;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReadingUpdater\");","map":{"version":3,"sources":["/Users/tuomasnummela/Desktop/bookworm/src/components/ReadingUpdater.js"],"names":["React","useState","ReadingUpdater","props","pagesRead","setPagesRead","totalPagesOfBook","setTotalPagesOfBook","bookName","setBookName","updatingState","setUpdatingState","select","document","getElementById","value","newBook","input","inputPagesRead","Number","inputTotalPagesOfBook","submitReading","bookSelector","knownBook","books","find","book","name","window","alert","setBooks","concat","pages","streak","setStreak","setReadByDate","Date","todayDate","getFullYear","getMonth","getDate","readByDate","setTotalPages","totalPages","setAppState","map","event","target"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAAA;;AAGjC;AACA,QAAM,CAAEC,SAAF,EAAaC,YAAb,IAA8BJ,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAAEK,gBAAF,EAAoBC,mBAApB,IAA4CN,QAAQ,CAAC,CAAD,CAA1D;AACA,QAAM,CAAEO,QAAF,EAAYC,WAAZ,IAA4BR,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAAES,aAAF,EAAiBC,gBAAjB,IAAsCV,QAAQ,CAAC,OAAD,CAApD,CAPiC,CASjC;;AAEA,QAAMW,MAAM,GAAG,MAAM;AACpB;AACAH,IAAAA,WAAW,CAACI,QAAQ,CAACC,cAAT,CAAwB,cAAxB,EAAwCC,KAAzC,CAAX;AACAJ,IAAAA,gBAAgB,CAAC,UAAD,CAAhB;AACA,GAJD;;AAMA,QAAMK,OAAO,GAAIC,KAAD,IAAW;AAC1B;AACAR,IAAAA,WAAW,CAACQ,KAAD,CAAX;AACAN,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACA,GAJD;;AAMA,QAAMO,cAAc,GAAID,KAAD,IAAW;AACjCZ,IAAAA,YAAY,CAACc,MAAM,CAACF,KAAD,CAAP,CAAZ;AACA,GAFD;;AAIA,QAAMG,qBAAqB,GAAG,MAAM,CAEnC,CAFD,CA3BiC,CAgCjC;;;AAEA,QAAMC,aAAa,GAAG,MAAM;AAE3B,UAAMC,YAAY,GAAGT,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAArB;AAEA,UAAMS,SAAS,GAAGpB,KAAK,CAACqB,KAAN,CAAYC,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcnB,QAAvC,CAAlB;;AAEA,QAAGA,QAAQ,KAAK,EAAhB,EAAmB;AAClBoB,MAAAA,MAAM,CAACC,KAAP,CAAa,8BAAb;AACA;AACA;;AACD,QAAG,CAACP,YAAJ,EAAiB;AAChB;AAEA,UAAGnB,KAAK,CAACqB,KAAN,CAAYC,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,IAAL,KAAcnB,QAAzC,CAAH,EAAsD;AACrD;AACAoB,QAAAA,MAAM,CAACC,KAAP,CAAa,8BAAb;AACA;AAEA,OALD,MAKM,IAAGrB,QAAQ,KAAK,EAAhB,EAAmB;AACxB;AACAoB,QAAAA,MAAM,CAACC,KAAP,CAAa,qBAAb;AACA;AAEA,OALK,MAKA,IAAGvB,gBAAgB,IAAI,CAApB,IAAyBF,SAAS,IAAI,CAAtC,IAA2CA,SAAS,GAAGE,gBAA1D,EAA2E;AAChF;AACAsB,QAAAA,MAAM,CAACC,KAAP,CAAa,qBAAb;AACA;AAEA,OALK,MAKD;AACJ,cAAMb,OAAO,GAAG;AACf,kBAAQR,QADO;AAEf,mBAASF,gBAFM;AAGf,uBAAaF;AAHE,SAAhB;AAMAD,QAAAA,KAAK,CAAC2B,QAAN,CAAe3B,KAAK,CAACqB,KAAN,CAAYO,MAAZ,CAAmBf,OAAnB,CAAf;AAEA;AACD,KA5BD,MA4BK;AACJ;AACA,UAAGZ,SAAS,IAAI,CAAb,IAAkBmB,SAAS,CAACnB,SAAV,GAAoBA,SAApB,GAAgCmB,SAAS,CAACS,KAA/D,EAAqE;AACpE;AACAJ,QAAAA,MAAM,CAACC,KAAP,CAAa,qBAAb;AACA;AACA;;AACDN,MAAAA,SAAS,CAACnB,SAAV,IAAuBA,SAAvB;AAEA,KA/C0B,CAiD3B;;;AAEA,QAAGD,KAAK,CAAC8B,MAAN,KAAiB,CAApB,EAAsB;AAErB;AAEA9B,MAAAA,KAAK,CAAC+B,SAAN,CAAgB/B,KAAK,CAAC8B,MAAN,GAAa,CAA7B;AAEA9B,MAAAA,KAAK,CAACgC,aAAN,CAAoB,IAAIC,IAAJ,CAASjC,KAAK,CAACkC,SAAN,CAAgBC,WAAhB,EAAT,EACnBnC,KAAK,CAACkC,SAAN,CAAgBE,QAAhB,EADmB,EACSpC,KAAK,CAACkC,SAAN,CAAgBG,OAAhB,KAA0B,CADnC,CAApB;AAGA,KATD,MASM,IAAGrC,KAAK,CAACkC,SAAN,CAAgBC,WAAhB,OAAkCnC,KAAK,CAACsC,UAAN,CAAiBH,WAAjB,EAAlC,IACRnC,KAAK,CAACkC,SAAN,CAAgBE,QAAhB,OAA+BpC,KAAK,CAACsC,UAAN,CAAiBF,QAAjB,EADvB,IAERpC,KAAK,CAACkC,SAAN,CAAgBG,OAAhB,OAA8BrC,KAAK,CAACsC,UAAN,CAAiBD,OAAjB,EAFzB,EAEoD;AAEzD;AAEArC,MAAAA,KAAK,CAAC+B,SAAN,CAAgB/B,KAAK,CAAC8B,MAAN,GAAa,CAA7B;AAEA9B,MAAAA,KAAK,CAACgC,aAAN,CAAoB,IAAIC,IAAJ,CAASjC,KAAK,CAACsC,UAAN,CAAiBH,WAAjB,EAAT,EACnBnC,KAAK,CAACsC,UAAN,CAAiBF,QAAjB,EADmB,EACUpC,KAAK,CAACsC,UAAN,CAAiBD,OAAjB,KAA2B,CADrC,CAApB;AAEA;;AAEDrC,IAAAA,KAAK,CAACuC,aAAN,CAAoBvC,KAAK,CAACwC,UAAN,GAAiBvC,SAArC;AACAO,IAAAA,gBAAgB,CAAC,OAAD,CAAhB;AACAR,IAAAA,KAAK,CAACyC,WAAN,CAAkB,OAAlB;AAEA,GA5ED;;AA8EA,sBACC;AAAA,4BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,EAGElC,aAAa,KAAK,KAAlB,iBACA;AAAA,8CACD;AAAQ,QAAA,EAAE,EAAC,cAAX;AAA0B,QAAA,YAAY,EAAC,SAAvC;AAAiD,QAAA,QAAQ,EAAEE,MAA3D;AAAA,gCACC;AAAQ,UAAA,KAAK,EAAC,SAAd;AAAwB,UAAA,QAAQ,MAAhC;AAAiC,UAAA,MAAM,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,EAGET,KAAK,CAACqB,KAAN,CAAYqB,GAAZ,CAAiBnB,IAAD,iBAAU;AAAA,oBAAyBA,IAAI,CAACC;AAA9B,WAAaD,IAAI,CAACC,IAAlB;AAAA;AAAA;AAAA;AAAA,gBAA1B,CAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cADC;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,EAcEjB,aAAa,KAAK,UAAlB,iBACA;AAAA,wDAAyB;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,mBAA/B;AAC1B,QAAA,QAAQ,EAAEoC,KAAK,IAAI9B,OAAO,CAAC8B,KAAK,CAACC,MAAN,CAAahC,KAAd;AADA;AAAA;AAAA;AAAA;AAAA,cAAzB,eAED;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,oBAA/B;AACA,QAAA,QAAQ,EAAE+B,KAAK,IAAIvC,mBAAmB,CAACY,MAAM,CAAC2B,KAAK,CAACC,MAAN,CAAahC,KAAd,CAAP;AADtC;AAAA;AAAA;AAAA;AAAA,cAFC;AAAA;AAAA;AAAA;AAAA;AAAA,YAfF,eAqBC;AAAA,8CAAe;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,oBAA/B;AACf,QAAA,QAAQ,EAAE+B,KAAK,IAAI5B,cAAc,CAAC4B,KAAK,CAACC,MAAN,CAAahC,KAAd;AADlB;AAAA;AAAA;AAAA;AAAA,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA,YArBD,eAwBC;AAAQ,MAAA,OAAO,EAAEM,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAxBD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AA4BA,CA5ID;;GAAMnB,c;;KAAAA,c;AA+IN,eAAeA,cAAf","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\n\nconst ReadingUpdater = (props) => {\n\n\n\t//State declarations\n\tconst [ pagesRead, setPagesRead ] = useState(0);\n\tconst [ totalPagesOfBook, setTotalPagesOfBook ] = useState(0);\n\tconst [ bookName, setBookName ] = useState('');\n\tconst [ updatingState, setUpdatingState ] = useState('start');\n\n\t//Function declarations\n\n\tconst select = () => {\n\t\t//Runs when a book is selected on the selector\n\t\tsetBookName(document.getElementById('bookSelector').value);\n\t\tsetUpdatingState('selected');\n\t}\n\n\tconst newBook = (input) => {\n\t\t//Runs when new book name is edited\n\t\tsetBookName(input);\n\t\tsetUpdatingState('new');\n\t}\n\n\tconst inputPagesRead = (input) => {\n\t\tsetPagesRead(Number(input));\n\t}\n\n\tconst inputTotalPagesOfBook = () => {\n\n\t}\n\n\n\t//TODO: ACCOUNT FOR USER INPUTTING TEXT IN THE PAGES-FIELD\n\n\tconst submitReading = () => {\n\n\t\tconst bookSelector = document.getElementById('bookSelector');\n\n\t\tconst knownBook = props.books.find(book => book.name === bookName);\n\n\t\tif(bookName === ''){\n\t\t\twindow.alert('Select or enter a book name!')\n\t\t\treturn;\n\t\t}\n\t\tif(!bookSelector){\n\t\t\t//New book\n\n\t\t\tif(props.books.find((book) => book.name === bookName)){\n\t\t\t\t//'New' bookName is actually the name of a book previously added\n\t\t\t\twindow.alert('Book has already been added!')\n\t\t\t\treturn;\n\n\t\t\t}else if(bookName === ''){\n\t\t\t\t//New bookname is empty\n\t\t\t\twindow.alert('Insert a book name!')\n\t\t\t\treturn;\n\n\t\t\t}else if(totalPagesOfBook <= 0 || pagesRead <= 0 || pagesRead > totalPagesOfBook){\n\t\t\t\t//Invalid book page count\n\t\t\t\twindow.alert('Invalid page count!')\n\t\t\t\treturn;\n\n\t\t\t}else{\n\t\t\t\tconst newBook = {\n\t\t\t\t\t'name': bookName,\n\t\t\t\t\t'pages': totalPagesOfBook,\n\t\t\t\t\t'pagesRead': pagesRead\n\t\t\t\t}\n\n\t\t\t\tprops.setBooks(props.books.concat(newBook));\n\n\t\t\t}\n\t\t}else{\n\t\t\t//Selected book\n\t\t\tif(pagesRead <= 0 || knownBook.pagesRead+pagesRead > knownBook.pages){\n\t\t\t\t//Invalid book page count\n\t\t\t\twindow.alert('Invalid page count!')\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tknownBook.pagesRead += pagesRead;\n\n\t\t}\n\n\t\t//Handle stats and UI updating\n\n\t\tif(props.streak === 0){\n\n\t\t\t//Streak updating after a reset\n\n\t\t\tprops.setStreak(props.streak+1);\n\n\t\t\tprops.setReadByDate(new Date(props.todayDate.getFullYear(), \n\t\t\t\tprops.todayDate.getMonth(), props.todayDate.getDate()+1));\n\n\t\t}else if(props.todayDate.getFullYear() === props.readByDate.getFullYear() &&\n\t\t\tprops.todayDate.getMonth() === props.readByDate.getMonth() &&\n\t\t\tprops.todayDate.getDate() === props.readByDate.getDate()){\n\n\t\t\t//Normal streak updating handling\n\n\t\t\tprops.setStreak(props.streak+1);\n\n\t\t\tprops.setReadByDate(new Date(props.readByDate.getFullYear(), \n\t\t\t\tprops.readByDate.getMonth(), props.readByDate.getDate()+1));\n\t\t}\n\t\n\t\tprops.setTotalPages(props.totalPages+pagesRead);\n\t\tsetUpdatingState('start');\n\t\tprops.setAppState('start');\n\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<h3>Update read books</h3>\n\n\t\t\t{updatingState !== 'new' &&\n\t\t\t(<p>Select book:\n\t\t\t<select id='bookSelector' defaultValue='default' onChange={select}>\n\t\t\t\t<option value='default' disabled hidden>Choose here</option>\n\n\t\t\t\t{props.books.map((book) => <option key={book.name}>{book.name}</option>)}\n\n\t\t\t</select>\n\n\t\t\t</p>)\n\t\t\t}\n\t\t\t{updatingState !== 'selected' && \n\t\t\t(<p>... or add a new one: <input type='text' placeholder='book name here...' \n\t\t\tonChange={event => newBook(event.target.value)}/> \n\t\t\t<input type='text' placeholder='page count here...'\n\t\t\tonChange={event => setTotalPagesOfBook(Number(event.target.value))}/></p>)\n\t\t\t}\n\n\t\t\t<p>Pages read: <input type='text' placeholder='read pages here...' \n\t\t\tonChange={event => inputPagesRead(event.target.value)} /></p>\n\n\t\t\t<button onClick={submitReading}>Submit pages read!</button>\n\t\t</div>\n\t);\n}\n\n\nexport default ReadingUpdater"]},"metadata":{},"sourceType":"module"}